package org.mazur.gromulaimport org.mazur.gromula.gui.MainFrameStateimport java.util.EventObjectimport groovy.swing.SwingBuilder
import javax.swing.JSplitPaneimport javax.swing.JFileChooserimport javax.swing.filechooser.FileNameExtensionFilter
import java.awt.BorderLayout as BL
import java.awt.Font

import javax.swing.WindowConstants as WC
import javax.swing.JToolBar
import javax.swing.UIManager
import javax.swing.JOptionPane
/**
 * Version: $Id$
 * @author Roman Mazur (mailto: mazur.roman@gmail.com)
 */
public final class Starter {    static final int MIN_FONT_SIZE = 8, MAX_FONT_SIZE = 24    /** State. */  private MainFrameState state = new MainFrameState()  /** Script starter. */  private ProgramInterpreter programInterpreter = new ProgramInterpreter()    /** Builder. */  private def swing = new SwingBuilder()  /** Document tabs. */  private def documentTabs = swing.tabbedPane(constraints : BL.CENTER)  private def logTextArea = swing.textArea()  private def errorTextArea = swing.textArea()    private def messageLabel = swing.label()    /** Action to make the code font smaller. */  private def smallerFontAction = swing.action(    name : 'Smaller font', mnemonic : 'S',    accelerator : 'alt shift S',    keyStroke : 'alt shift S',    closure : {      if (!state.activeDocument) { return }      int s = state.activeCodeArea.font.size - 2      if (s < MIN_FONT_SIZE) { s = MIN_FONT_SIZE }      state.activeCodeArea.font = Utils.createCodeFont(s)    }  )      /** Action to make the code font smaller. */  private def largerFontAction = swing.action(    name : 'Larger font', mnemonic : 'L',    accelerator : 'alt shift L',    keyStroke : 'alt shift L',    closure : {      if (!state.activeDocument) { return }      int s = state.activeCodeArea.font.size + 2      if (s > MAX_FONT_SIZE) { s = MAX_FONT_SIZE }      state.activeCodeArea.font = Utils.createCodeFont(s)    }  )  private def addUserMessage = { area, msg ->    area.text = area.text + msg + '\n'    }  private def errorMessage = { msg ->    addUserMessage(errorTextArea, msg)  }    /** Action to run the program. */  private def runAction = swing.action(    name : 'Run', mnemonic : 'R',    accelerator : 'alt shift R',    keyStroke : 'alt shift R',    closure : {      boolean r = programInterpreter.runScript(          getProgramText(),           {addUserMessage(logTextArea, it)},           errorMessage      )      if (!r) {        JOptionPane.showMessageDialog(mainFrame, "Some errors occured", "Errors", JOptionPane.ERROR_MESSAGE)      }    }  )    private void addDocToTab() {    SwingBuilder.build() {      def panel = panel(border : raisedEtchedBorder()) {        borderLayout()        scrollPane(preferredSize : [-1, 500]) {          widget(state.activeCodeArea)        }      }      documentTabs.add(panel, state.activeDocument.name)      documentTabs.selectedIndex = state.activeDocument.index    }  }  /** Create new document action. */  private def newDocumentAction = swing.action(    name : 'New', mnemonic : 'N',    accelerator : 'ctrl N',    keyStroke : 'ctrl N',    closure : {      state.newDocument()      addDocToTab()    }  )  /** Files chooser. */  private JFileChooser filesChooser = new JFileChooser()    /** Open document action. */  private def openDocumentAction = swing.action(    name : 'Open', mnemonic : 'O',    accelerator : 'ctrl O',    keyStroke : 'ctrl O',    closure : {      int res = filesChooser.showOpenDialog(mainFrame)      if (res == JFileChooser.APPROVE_OPTION) {        state.openDocument(filesChooser.selectedFile)        addDocToTab()      }    }  )    /** Save as document action. */  private def saveAsDocumentAction = swing.action(    name : 'Save as', mnemonic : 'A',    accelerator : 'ctrl shift S',    keyStroke : 'ctrl shift S',    closure : {      int res = filesChooser.showSaveDialog(mainFrame)      if (res == JFileChooser.APPROVE_OPTION) {        state.saveDocument(filesChooser.selectedFile)        documentTabs.setTitleAt(state.activeDocument.index, state.activeDocument.name)      }    }  )  /** Save document action. */  private def saveDocumentAction = swing.action(    name : 'Save', mnemonic : 'S',    accelerator : 'ctrl S',    keyStroke : 'ctrl S',    closure : {      if (!state.saveDocument()) {        saveAsDocumentAction.actionPerformed(null)      }    }  )    private def getProgramText() { return state.activeCodeArea.text }    /** Main frame. */  private def mainFrame = swing.frame(title : 'Gromula',                                      defaultCloseOperation : WC.EXIT_ON_CLOSE) {    menuBar() {      menu(text : 'File') {        menuItem(action : newDocumentAction)        menuItem(action : openDocumentAction)        menuItem(action : saveDocumentAction)        menuItem(action : saveAsDocumentAction)      }    }    borderLayout()    panel(constraints : BL.CENTER) {      borderLayout()      splitPane(orientation : JSplitPane.VERTICAL_SPLIT, dividerLocation : 200) {        widget(documentTabs, constraints : 'top')        tabbedPane(constraints : 'bottom') {          scrollPane(name : 'Log', preferredSize : [-1, 100]) {            widget(logTextArea)           }          scrollPane(name : 'Problems', preferredSize : [-1, 100]) {             widget(errorTextArea)           }        }             }    }    toolBar(constraints : BL.EAST, orientation : JToolBar.VERTICAL) {      button(action : smallerFontAction)      button(action : largerFontAction)      button(action : runAction)    }    panel(constraints : BL.SOUTH) {      widget(messageLabel)    }  }  private Starter() {    filesChooser.fileFilter = new FileNameExtensionFilter("Gromula files", "gm")    newDocumentAction.actionPerformed()    mainFrame.pack()    mainFrame.size = [600, 400]    mainFrame.show()  }    static void main(final String[] args) {    //UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName())    new Starter()  }}